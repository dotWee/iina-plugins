name: Release Plugins

on:
  push:
    tags:
      - 'v*' # Trigger on tags like v1.0.0, v2.1.3, etc.

permissions:
  contents: write # Needed to create releases and push version updates

jobs:
  build-release:
    runs-on: macos-latest # Using macOS runner as it includes zip and jq
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch all history and tags to ensure tag info is available
          # and to allow pushing back version updates
          fetch-depth: 0

      - name: Get Tag Version
        id: get_version
        # Extract version from tag (e.g., v1.2.3 -> 1.2.3)
        run: echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV

      - name: Find Plugin Directories
        id: find_plugins
        # Find directories containing Info.json (excluding .github)
        run: |
          PLUGIN_DIRS=$(find . -maxdepth 2 -name Info.json -not -path './.github/*' -exec dirname {} \; | paste -sd "," -)
          echo "PLUGIN_DIRS=${PLUGIN_DIRS}" >> $GITHUB_OUTPUT

      - name: Update Info.json Versions
        run: |
          IFS=',' read -ra DIRS <<< "${{ steps.find_plugins.outputs.PLUGIN_DIRS }}"
          for dir in "${DIRS[@]}"; do
            echo "Updating version in $dir/Info.json to ${{ env.VERSION }}"
            # Use sponge to write back to the same file
            jq --arg VERSION "${{ env.VERSION }}" '.version = $VERSION' "$dir/Info.json" > tmp.$$.json && mv tmp.$$.json "$dir/Info.json"
            git add "$dir/Info.json"
          done

      - name: Commit Version Updates
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          # Check if there are staged changes before committing
          if ! git diff --staged --quiet; then
            git commit -m "Update plugin versions to ${{ env.VERSION }} [skip ci]"
            # Push to the default branch (usually main or master)
            git push origin HEAD:${{ github.event.repository.default_branch }}
          else
            echo "No Info.json files updated, skipping commit."
          fi

      - name: Package Plugins
        run: |
          IFS=',' read -ra DIRS <<< "${{ steps.find_plugins.outputs.PLUGIN_DIRS }}"
          mkdir -p release-assets
          for dir in "${DIRS[@]}"; do
            PLUGIN_NAME=$(basename "$dir")
            ARCHIVE_NAME="${PLUGIN_NAME}.iinaplgz"
            echo "Packaging $PLUGIN_NAME into $ARCHIVE_NAME"
            # Zip contents directly without the parent folder
            (cd "$dir" && zip -r "../release-assets/$ARCHIVE_NAME" . -x ".git/*")
          done

      - name: List Release Assets
        id: list_assets
        run: |
          ASSETS=$(ls release-assets/*.iinaplgz | xargs -n 1 basename | jq -Rsc 'split("\n")[:-1]')
          echo "assets=$ASSETS" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd release-assets
          for asset in *.iinaplgz; do
            echo "Uploading $asset..."
            gh release upload ${{ github.ref_name }} "$asset" --clobber
          done
          cd .. 